!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.HttpBrowserWrapper=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var HttpBrowserWrapper;

  module.exports = HttpBrowserWrapper = (function() {
    function HttpBrowserWrapper(requester) {
      if (requester == null) {
        requester = null;
      }
      if (requester != null) {
        this.requester = requester;
      }
    }

    HttpBrowserWrapper.prototype.request = function(params, callback) {
      var k, url, v, xmlhttp, _ref;
      if (params.method == null) {
        params.method = "GET";
      }
      if ((params.host == null) && (params.hostname != null)) {
        params.host = params.hostname;
      }
      if (!((params.scheme != null) || (typeof window === "undefined" || window === null))) {
        params.scheme = window.location.protocol.split(':')[0];
      }
      if (!params.scheme || params.scheme === 'file') {
        params.scheme = 'https';
      }
      if (params.data == null) {
        params.data = {};
      }
      if (params.body != null) {
        params.data = params.body;
      }
      if (params.headers == null) {
        params.headers = {};
      }
      url = params.scheme + "://" + params.host + ":" + params.port + params.path;
      if (params.method === "GET" && (params.data != null) && params.data.length > 0) {
        url += '?' + Object.keys(params.data).map(function(k) {
          return encodeURIComponent(k) + '=' + encodeURIComponent(params.data[k]);
        }).join('&');
      }
      if ((typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null)) {
        xmlhttp = new XMLHttpRequest;
      } else {
        xmlhttp = this.requester;
      }
      xmlhttp.open(params.method, url, true);
      _ref = params.headers;
      for (k in _ref) {
        v = _ref[k];
        xmlhttp.setRequestHeader(k, v);
      }
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState === 4) {
          if (xmlhttp.status >= 200 && xmlhttp.status <= 299) {
            return callback(null, JSON.parse(xmlhttp.responseText));
          } else {
            return callback(xmlhttp.statusText, null);
          }
        }
      };
      if (params.method === "GET") {
        return xmlhttp.send();
      } else {
        return xmlhttp.send(params.data);
      }
    };

    return HttpBrowserWrapper;

  })();

}).call(this);

},{}]},{},[1])
(1)
});